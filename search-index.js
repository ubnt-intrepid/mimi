var searchIndex={};
searchIndex["mimi"] = {"doc":"Minimal test harness that mimics libtest for asynchronousâ€¦","i":[[3,"Benchmark","mimi","The handle to a benchmark test.",null,null],[3,"Test","","The handle to a test.",null,null],[3,"TestOptions","","A set of options for a test or a benchmark.",null,null],[3,"TestSuite","","A type that represents a test suite.",null,null],[11,"new","","Create a new `TestOptions`.",0,[[],["self"]]],[11,"ignored","","Mark that the test will be ignored.",0,[[["bool"]],["self"]]],[11,"from_env","","Create a test suite.",1,[[],["self"]]],[11,"try_from_env","","Create a test suite, if possible.",1,[[],["option"]]],[11,"add_test","","Register a single test to the suite.",1,[[["str"],["self"],["testoptions"]],[["test"],["option",["test"]]]]],[11,"add_bench","","Register a single benchmark test to the suite.",1,[[["str"],["self"],["testoptions"]],[["benchmark"],["option",["benchmark"]]]]],[11,"run_tests","","Run the test suite and aggregate the results.",1,[[["self"]]]],[11,"run","","Wrap a future to catch events from the test suite.",2,[[["fut"]]]],[11,"run","","Wrap a future to catch events from the test suite.",3,[[["fut"]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["testoptions"]]],[11,"default","","",0,[[],["testoptions"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]]],"p":[[3,"TestOptions"],[3,"TestSuite"],[3,"Test"],[3,"Benchmark"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);